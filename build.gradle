buildscript {
    dependencies {
        classpath 'io.github.gradle-nexus:publish-plugin:1.1.0'
    }
}

plugins {
    id 'maven-publish'
    id "io.spring.dependency-management" version "1.0.6.RELEASE"
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
}

apply plugin: 'io.github.gradle-nexus.publish-plugin'

nexusPublishing {
    repositories {
        sonatype {
            stagingProfileId = '5d4516aee10f28'
            username = ossrhUsername
            password = ossrhPassword
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

ext {
    group_id = 'org.skelligframework'
    version = '2.0.6-beta'
    mockitoVersion = '4.0.0'
    junitApiVersion = '5.8.1'
    junitPlatformVersion = '1.2.0'
    mockitoJunitVersion = '2.18.0'
    typesafeConfigVersion = '1.4.0'
    slf4jLogVersion = '1.7.30'
    kotlinVersion = '1.5.0'
}

allprojects {
    apply plugin: 'jacoco'
    apply plugin: 'maven-publish'
    group 'org.skelligframework'
    version "${version}"

    repositories {
        mavenLocal()
        mavenCentral()
    }
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'io.spring.dependency-management'

    version = '2.0.6-beta'

    ext {
        project_name = 'Skellig Framework'
        project_description = 'Skellig Framework'
    }

    task sourceJar(type: Jar) {
        classifier "sources"
        from sourceSets.main.allJava
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier "javadoc"
        from javadoc.destinationDir
    }

    artifacts {
        archives jar
        archives sourceJar
        archives javadocJar
    }

    jar {
        from sourceSets.main.output
        from sourceSets.main.allJava
        manifest {
            attributes(
                    "Manifest-Version": "1.0",
                    "Implementation-Title": "${project.name}",
                    "Implementation-Version": "${project.version}",
                    'Implementation-Date': new java.text.SimpleDateFormat("yyyy-MM-dd").format(new Date()),
                    'Created-By': "Gradle ${gradle.gradleVersion}",
                    'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
            )
        }
    }

    afterEvaluate {
        publishing {
            publications {
                mavenJava(MavenPublication) {
                    groupId = 'org.skelligframework'
                    afterEvaluate {
                        artifactId = jar.baseName
                    }
                    from components.java
                }

                release(MavenPublication) {
                    groupId = 'org.skelligframework'
                    version = "${version}"
                    afterEvaluate {
                        artifactId = jar.baseName
                    }

                    from components.java

                    pom {
                        url = 'https://skelligframework.org'
                        name = project_name
                        description = project_description

                        developers {
                            developer {
                                id = 'Shendor'
                                email = 'shendor1988@gmail.com'
                            }
                        }

                        license {
                            name = 'The Apache Software License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution = 'repo'
                        }

                        scm {
                            connection = 'https://github.com/skellig-framework/skellig-core.git'
                            url = 'https://github.com/skellig-framework/skellig-core'
                        }

                        signing {
                            required { gradle.taskGraph.hasTask("publish") }
                            sign publishing.publications.release
                            sign configurations.archives
                        }
                    }
                }
            }
        }
    }

    test {
        reports.html.enabled = false
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencyManagement {
        dependencies {
            dependency group: 'org.slf4j', name: 'slf4j-api', version: "${slf4jLogVersion}"
            dependency group: 'org.slf4j', name: 'slf4j-log4j12', version: "${slf4jLogVersion}"
            dependency group: 'log4j', name: 'log4j', version: '1.2.17'
            dependency group: 'com.typesafe', name: 'config', version: "${typesafeConfigVersion}"
            dependency group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
            dependency group: 'org.freemarker', name: 'freemarker', version: "2.3.30"

            dependency group: 'org.mockito', name: 'mockito-core', version: "${mockitoVersion}"
            dependency group: 'com.nhaarman', name: 'mockito-kotlin', version: '1.6.0'
            dependency group: 'com.nhaarman.mockitokotlin2', name: 'mockito-kotlin', version: '2.2.0'
            dependency group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: "${junitApiVersion}"
            dependency group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: "${junitApiVersion}"
            dependency group: 'org.junit.platform', name: 'junit-platform-runner', version: "${junitPlatformVersion}"
            dependency group: 'org.junit.platform', name: 'junit-platform-launcher', version: "${junitPlatformVersion}"
            dependency group: 'org.mockito', name: 'mockito-junit-jupiter', version: "${mockitoJunitVersion}"
            dependency group: 'org.jetbrains', name: 'kotlin:kotlin-reflect', version: "${kotlinVersion}"
        }
    }

    java {
        withSourcesJar()
        withJavadocJar()
    }

    test {
        useJUnitPlatform {
            excludeTags "component-test"
            testLogging {
                events "failed"

                showExceptions true
                exceptionFormat "full"
                showCauses true
                showStackTraces true
                showStandardStreams = false
            }
        }
    }

    tasks.register("componentTest", Test) {
        useJUnitPlatform {
            includeTags "component-test"
        }
    }
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn subprojects*.test
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled false
        csv.enabled false
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}